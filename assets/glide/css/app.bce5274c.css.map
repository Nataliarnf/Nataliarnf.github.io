{"version":3,"sources":["webpack:///src/components/src/components/CloudinaryUpload.vue","webpack:///src/src/App.vue"],"names":[],"mappings":"AA0KA,sBACA,YAAA,CAEA,kBAAA,CACA,wBAAA,CACA,uBAAA,CACA,eAAA,CACA,WACA,CACA,4BACA,eAAA,CACA,wBACA,CACA,6BACA,qBAAA,CACA,UAAA,CACA,aAAA,CACA,eAAA,CACA,YAAA,CACA,UAAA,CACA,QACA,CACA,mCACA,eAAA,CACA,UACA,CAEA,uBACA,wBACA,CAEA,uBACA,YAAA,CACA,mBACA,CACA,6BACA,sBACA,CAEA,yBACA,sBACA,+BAAA,CACA,aACA,CAEA,uBACA,gBAAA,CACA,eACA,CAEA,+CAEA,eACA,CACA,CAEA,wBACA,qBAAA,CACA,UAAA,CACA,eAAA,CACA,kBACA,CACA,8BACA,YACA,CACA,6EAEA,qBAAA,CACA,qBAAA,CACA,UACA,CACA,yBACA,aACA,CACA,qBACA,eAAA,CACA,WACA,CCpOA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aACA,CAEA,KACA,YAAA,CACA,kBAAA,CACA,WACA,CACA,UACA,UAAA,CACA,WACA","file":"app.bce5274c.css","sourcesContent":["<template>\r\n  <div class=\"cl-upload\">\r\n    <!-- supply h2 heading -->\r\n    <h2>Uploadez une image vers Cloudinary :</h2>\r\n    <div v-show=\"showProgress\">\r\n      <progress-bar :options=\"options\" :value=\"progress\" />\r\n    </div>\r\n\r\n    <!-- create a form that will not submit to a server but will prevent submit and\r\n    use the upload function as a handle-->\r\n    <form v-on:submit.prevent=\"upload\">\r\n      <!-- bind cloud-name to the input -->\r\n      <label for=\"cloudname-input\">Cloud Name:</label>\r\n      <input id=\"cloudname-input\" v-model=\"cloudName\" placeholder=\"Entrez votre cloudName (voir dashboard)\" />\r\n      <!-- bind preset to the input -->\r\n      <label for=\"preset-input\">Preset:</label>\r\n      <input id=\"preset-input\" v-model=\"preset\" placeholder=\"Entrez le preset choisi pour l'upload\" />\r\n      <!-- allow the user to select an image file and when they have selected it call a function \r\n      to handle this event-->\r\n      <label for=\"file-input\">Upload:</label>\r\n      <input\r\n        id=\"file-input\"\r\n        type=\"file\"\r\n        accept=\"image/png, image/jpeg\"\r\n        @change=\"handleFileChange($event)\"\r\n      />\r\n      <!-- submit button is disabled until a file is selected -->\r\n      <button type=\"submit\" :disabled=\"filesSelected < 1\">Upload</button>\r\n    </form>\r\n\r\n    <!-- display uploaded image if successful -->\r\n    <section v-if=\"results && results.secure_url\">\r\n      <img :src=\"results.secure_url\" :alt=\"results.public_id\" />\r\n    </section>\r\n\r\n    <!-- display errors if not successful -->\r\n    <section>\r\n      <ul v-if=\"errors.length > 0\">\r\n        <li v-for=\"(error,index) in errors\" :key=\"index\">{{error}}</li>\r\n      </ul>\r\n    </section>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport ProgressBar from \"vuejs-progress-bar\";\r\nexport default {\r\n  name: \"CloudinaryUpload\",\r\n  components: {\r\n    ProgressBar\r\n  },\r\n  data() {\r\n    const progressBarOptions = {\r\n      text: {\r\n        shadowColor: \"black\",\r\n        fontSize: 14,\r\n        fontFamily: \"Helvetica\",\r\n        dynamicPosition: true\r\n      },\r\n      progress: {\r\n        color: \"#E8C401\",\r\n        backgroundColor: \"#000000\"\r\n      },\r\n      layout: {\r\n        height: 35,\r\n        width: 140,\r\n        type: \"line\",\r\n        progressPadding: 0,\r\n        verticalTextAlign: 63\r\n      }\r\n    };\r\n    return {\r\n      results: null,\r\n      errors: [],\r\n      file: null,\r\n      filesSelected: 0,\r\n      cloudName: \"\",\r\n      preset: \"\",\r\n      tags: \"browser-upload\",\r\n      progress: 0,\r\n      showProgress: false,\r\n      options: progressBarOptions,\r\n      fileContents: null,\r\n      formData: null\r\n    };\r\n  },\r\n  methods: {\r\n    // function to handle file info obtained from local\r\n    // file system and set the file state\r\n    handleFileChange: function(event) {\r\n      console.log(\"handlefilechange\", event.target.files);\r\n      //returns an array of files even though multiple not used\r\n      this.file = event.target.files[0];\r\n      this.filesSelected = event.target.files.length;\r\n    },\r\n    prepareFormData: function() {\r\n      this.formData = new FormData();\r\n      this.formData.append(\"upload_preset\", this.preset);\r\n      this.formData.append(\"tags\", this.tags); // Optional - add tag for image admin in Cloudinary\r\n      this.formData.append(\"file\", this.fileContents);\r\n    },\r\n    // function to handle form submit\r\n    upload: function() {\r\n      //no need to look at selected files if there is no cloudname or preset\r\n      if (this.preset.length < 1 || this.cloudName.length < 1) {\r\n        this.errors.push(\"Vous devez entrez le cloud name et le preset choisi pour l'upload\");\r\n        return;\r\n      }\r\n      // clear errors\r\n      else {\r\n        this.errors = [];\r\n      }\r\n      console.log(\"upload\", this.file.name);\r\n\r\n      let reader = new FileReader();\r\n      // attach listener to be called when data from file\r\n      reader.addEventListener(\r\n        \"load\",\r\n        function() {\r\n          this.fileContents = reader.result;\r\n          this.prepareFormData();\r\n          let cloudinaryUploadURL = `https://api.cloudinary.com/v1_1/${this.cloudName}/upload`;\r\n          let requestObj = {\r\n            url: cloudinaryUploadURL,\r\n            method: \"POST\",\r\n            data: this.formData,\r\n            onUploadProgress: function(progressEvent) {\r\n              console.log(\"progress\", progressEvent);\r\n              this.progress = Math.round(\r\n                (progressEvent.loaded * 100.0) / progressEvent.total\r\n              );\r\n              console.log(this.progress);\r\n            //bind \"this\" to access vue state during callback\r\n            }.bind(this)\r\n          };\r\n          //show progress bar at beginning of post\r\n          this.showProgress = true;\r\n          axios(requestObj)\r\n            .then(response => {\r\n              this.results = response.data;\r\n              console.log(this.results);\r\n              console.log(\"public_id\", this.results.public_id);\r\n            })\r\n            .catch(error => {\r\n              this.errors.push(error);\r\n              console.log(this.error);\r\n            })\r\n            .finally(() => {\r\n              setTimeout(\r\n                function() {\r\n                  this.showProgress = false;\r\n                }.bind(this),\r\n                1000\r\n              );\r\n            });\r\n        }.bind(this),\r\n        false\r\n      );\r\n      // call for file read if there is a file\r\n      if (this.file && this.file.name) {\r\n        reader.readAsDataURL(this.file);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nform {\r\n  display: grid;\r\n  padding: 1em;\r\n  background: #f9f9f9;\r\n  border: 1px solid #c1c1c1;\r\n  margin: 2rem auto 0 auto;\r\n  max-width: 500px;\r\n  padding: 1em;\r\n}\r\nform input {\r\n  background: #fff;\r\n  border: 1px solid #9c9c9c;\r\n}\r\nform button {\r\n  background-color: blue;\r\n  color: white;\r\n  font-size: 1em;\r\n  font-weight: bold;\r\n  padding: 0.7em;\r\n  width: 100%;\r\n  border: 0;\r\n}\r\nform button:hover {\r\n  background: gold;\r\n  color: black;\r\n}\r\n\r\nlabel {\r\n  padding: 0.5em 0.5em 0.5em 0;\r\n}\r\n\r\ninput {\r\n  padding: 0.7em;\r\n  margin-bottom: 0.5rem;\r\n}\r\ninput:focus {\r\n  outline: 3px solid gold;\r\n}\r\n\r\n@media (min-width: 400px) {\r\n  form {\r\n    grid-template-columns: 150px 1fr;\r\n    grid-gap: 16px;\r\n  }\r\n\r\n  label {\r\n    text-align: right;\r\n    grid-column: 1 / 2;\r\n  }\r\n\r\n  input,\r\n  button {\r\n    grid-column: 2 / 3;\r\n  }\r\n}\r\n\r\nbutton {\r\n  background-color: blue;\r\n  color: white;\r\n  font-weight: bold;\r\n  border-radius: 10px;\r\n}\r\nbutton:focus {\r\n  outline: none;\r\n}\r\nform button:disabled,\r\nform button[disabled] {\r\n  border: 1px solid #999999;\r\n  background-color: #cccccc;\r\n  color: #666666;\r\n}\r\nsection {\r\n  margin: 10px 0;\r\n}\r\nimg {\r\n  max-width: 300px;\r\n  height: auto;\r\n}\r\n</style>\r\n\r\n","<template>\r\n  <div id=\"app\">\r\n    <img class=\"vue-logo\" src=\"./assets/logo.png\" />\r\n    <cl-upload class=\"align\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CloudinaryUpload from \"./components/CloudinaryUpload\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    \"cl-upload\": CloudinaryUpload\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #2c3e50;\r\n}\r\n\r\nbody {\r\n  display: grid;\r\n  place-items: center;\r\n  height: 80vh;\r\n}\r\n.vue-logo {\r\n  width: 50px;\r\n  height: auto;\r\n}\r\n</style>\r\n"]}